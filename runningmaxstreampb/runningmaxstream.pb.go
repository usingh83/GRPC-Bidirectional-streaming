// Code generated by protoc-gen-go. DO NOT EDIT.
// source: runningmaxstream.proto

package runningmaxstreampb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NumberRequest struct {
	Request              int64    `protobuf:"varint,1,opt,name=Request,proto3" json:"Request,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NumberRequest) Reset()         { *m = NumberRequest{} }
func (m *NumberRequest) String() string { return proto.CompactTextString(m) }
func (*NumberRequest) ProtoMessage()    {}
func (*NumberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_runningmaxstream_366150552ec1ea0f, []int{0}
}
func (m *NumberRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NumberRequest.Unmarshal(m, b)
}
func (m *NumberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NumberRequest.Marshal(b, m, deterministic)
}
func (dst *NumberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NumberRequest.Merge(dst, src)
}
func (m *NumberRequest) XXX_Size() int {
	return xxx_messageInfo_NumberRequest.Size(m)
}
func (m *NumberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NumberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NumberRequest proto.InternalMessageInfo

func (m *NumberRequest) GetRequest() int64 {
	if m != nil {
		return m.Request
	}
	return 0
}

type NumberResponse struct {
	Response             int64    `protobuf:"varint,1,opt,name=Response,proto3" json:"Response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NumberResponse) Reset()         { *m = NumberResponse{} }
func (m *NumberResponse) String() string { return proto.CompactTextString(m) }
func (*NumberResponse) ProtoMessage()    {}
func (*NumberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_runningmaxstream_366150552ec1ea0f, []int{1}
}
func (m *NumberResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NumberResponse.Unmarshal(m, b)
}
func (m *NumberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NumberResponse.Marshal(b, m, deterministic)
}
func (dst *NumberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NumberResponse.Merge(dst, src)
}
func (m *NumberResponse) XXX_Size() int {
	return xxx_messageInfo_NumberResponse.Size(m)
}
func (m *NumberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NumberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NumberResponse proto.InternalMessageInfo

func (m *NumberResponse) GetResponse() int64 {
	if m != nil {
		return m.Response
	}
	return 0
}

func init() {
	proto.RegisterType((*NumberRequest)(nil), "runningmaxstream.NumberRequest")
	proto.RegisterType((*NumberResponse)(nil), "runningmaxstream.NumberResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RunningmaxstreamClient is the client API for Runningmaxstream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RunningmaxstreamClient interface {
	CurrentMax(ctx context.Context, opts ...grpc.CallOption) (Runningmaxstream_CurrentMaxClient, error)
}

type runningmaxstreamClient struct {
	cc *grpc.ClientConn
}

func NewRunningmaxstreamClient(cc *grpc.ClientConn) RunningmaxstreamClient {
	return &runningmaxstreamClient{cc}
}

func (c *runningmaxstreamClient) CurrentMax(ctx context.Context, opts ...grpc.CallOption) (Runningmaxstream_CurrentMaxClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Runningmaxstream_serviceDesc.Streams[0], "/runningmaxstream.Runningmaxstream/CurrentMax", opts...)
	if err != nil {
		return nil, err
	}
	x := &runningmaxstreamCurrentMaxClient{stream}
	return x, nil
}

type Runningmaxstream_CurrentMaxClient interface {
	Send(*NumberRequest) error
	Recv() (*NumberResponse, error)
	grpc.ClientStream
}

type runningmaxstreamCurrentMaxClient struct {
	grpc.ClientStream
}

func (x *runningmaxstreamCurrentMaxClient) Send(m *NumberRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *runningmaxstreamCurrentMaxClient) Recv() (*NumberResponse, error) {
	m := new(NumberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RunningmaxstreamServer is the server API for Runningmaxstream service.
type RunningmaxstreamServer interface {
	CurrentMax(Runningmaxstream_CurrentMaxServer) error
}

func RegisterRunningmaxstreamServer(s *grpc.Server, srv RunningmaxstreamServer) {
	s.RegisterService(&_Runningmaxstream_serviceDesc, srv)
}

func _Runningmaxstream_CurrentMax_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RunningmaxstreamServer).CurrentMax(&runningmaxstreamCurrentMaxServer{stream})
}

type Runningmaxstream_CurrentMaxServer interface {
	Send(*NumberResponse) error
	Recv() (*NumberRequest, error)
	grpc.ServerStream
}

type runningmaxstreamCurrentMaxServer struct {
	grpc.ServerStream
}

func (x *runningmaxstreamCurrentMaxServer) Send(m *NumberResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *runningmaxstreamCurrentMaxServer) Recv() (*NumberRequest, error) {
	m := new(NumberRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Runningmaxstream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "runningmaxstream.Runningmaxstream",
	HandlerType: (*RunningmaxstreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CurrentMax",
			Handler:       _Runningmaxstream_CurrentMax_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "runningmaxstream.proto",
}

func init() {
	proto.RegisterFile("runningmaxstream.proto", fileDescriptor_runningmaxstream_366150552ec1ea0f)
}

var fileDescriptor_runningmaxstream_366150552ec1ea0f = []byte{
	// 160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0x2a, 0xcd, 0xcb,
	0xcb, 0xcc, 0x4b, 0xcf, 0x4d, 0xac, 0x28, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0xd5, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x12, 0x40, 0x17, 0x57, 0xd2, 0xe4, 0xe2, 0xf5, 0x2b, 0xcd, 0x4d, 0x4a, 0x2d,
	0x0a, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe0, 0x62, 0x87, 0x32, 0x25, 0x18, 0x15,
	0x18, 0x35, 0x98, 0x83, 0x60, 0x5c, 0x25, 0x1d, 0x2e, 0x3e, 0x98, 0xd2, 0xe2, 0x82, 0xfc, 0xbc,
	0xe2, 0x54, 0x21, 0x29, 0x2e, 0x0e, 0x18, 0x1b, 0xaa, 0x18, 0xce, 0x37, 0xca, 0xe4, 0x12, 0x08,
	0x42, 0xb3, 0x4c, 0x28, 0x94, 0x8b, 0xcb, 0xb9, 0xb4, 0xa8, 0x28, 0x35, 0xaf, 0xc4, 0x37, 0xb1,
	0x42, 0x48, 0x5e, 0x0f, 0xc3, 0x95, 0x28, 0x4e, 0x91, 0x52, 0xc0, 0xad, 0x00, 0x62, 0x89, 0x12,
	0x83, 0x06, 0xa3, 0x01, 0xa3, 0x93, 0x48, 0x94, 0x10, 0xba, 0xc2, 0x82, 0xa4, 0x24, 0x36, 0xb0,
	0x97, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x15, 0x90, 0x8a, 0x37, 0x0c, 0x01, 0x00, 0x00,
}
